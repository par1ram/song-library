// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/songs/add": {
            "post": {
                "description": "Inserts a new song into the database. Fetches additional song details from an external API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Insert a new song",
                "parameters": [
                    {
                        "description": "Request body for inserting a song",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.InsertSongParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created song details",
                        "schema": {
                            "$ref": "#/definitions/main.InsertSongParams"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to insert song or fetch external API data",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/songs/delete": {
            "delete": {
                "description": "Deletes a song from the database by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Delete a song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion",
                        "schema": {
                            "$ref": "#/definitions/main.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing song ID",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete song",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/songs/get-song-verses": {
            "get": {
                "description": "Get song verses by song ID with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Get song verses with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of song verses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Verse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Song not found",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get song verses",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/songs/get-with-filters-and-pagination": {
            "post": {
                "description": "Get song by applying filters and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Get song with filters and pagination",
                "parameters": [
                    {
                        "description": "Request body for getting songs with filters and pagination",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ParametersGetSongsWithFiltersAndPagination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of filtered songs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Song"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or filters",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch songs",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/songs/getAll-with-filters": {
            "post": {
                "description": "Get a list of songs with filtering and pagination options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Get all songs with filters",
                "parameters": [
                    {
                        "description": "Request body for getting songs with filters",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ParametersGetSongs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of songs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Song"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or filters",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch songs",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/songs/update": {
            "put": {
                "description": "Updates the details of an existing song in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Update an existing song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request body for updating a song",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateSongParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated song details",
                        "schema": {
                            "$ref": "#/definitions/main.UpdateSongParams"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or song ID",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update song",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.EmptyResponse": {
            "type": "object"
        },
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "An error occurred"
                }
            }
        },
        "main.InsertSongParams": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "example": "Джизус"
                },
                "song_name": {
                    "type": "string",
                    "example": "Spirit of the world"
                }
            }
        },
        "main.ParametersGetSongs": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "example": "Джизус"
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "song": {
                    "type": "string",
                    "example": "Spirit of the world"
                }
            }
        },
        "main.ParametersGetSongsWithFiltersAndPagination": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "example": "Джизус"
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "release_date": {
                    "type": "string",
                    "example": "2022-01-01"
                },
                "song": {
                    "type": "string",
                    "example": "Spirit of the world"
                }
            }
        },
        "main.Song": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "example": "Джизус"
                },
                "id": {
                    "type": "string",
                    "example": "f7d5a812-12f3-4b92-a7d6-5c9f3a327f6b"
                },
                "link": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "release_date": {
                    "type": "string"
                },
                "song_name": {
                    "type": "string",
                    "example": "Spirit of the world"
                },
                "text": {
                    "type": "string",
                    "example": "Song lyrics"
                }
            }
        },
        "main.UpdateSongParams": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "example": "Джизус"
                },
                "link": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "release_date": {
                    "type": "string",
                    "example": "2022-11-11"
                },
                "song_name": {
                    "type": "string",
                    "example": "Spirit of the world"
                },
                "text": {
                    "type": "string",
                    "example": "Lyrics of the song"
                }
            }
        },
        "main.Verse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "f7d5a812-12f3-4b92-a7d6-5c9f3a327f6b"
                },
                "limit": {
                    "type": "string",
                    "example": "10"
                },
                "offset": {
                    "type": "string",
                    "example": "0"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Song Library API",
	Description:      "API for managing a song library.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
