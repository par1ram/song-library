// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs WHERE id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSong, id)
	return err
}

const getSongVersesWithPagination = `-- name: GetSongVersesWithPagination :one
WITH verses AS (
  SELECT unnest(string_to_array(text, E'\n\n')) AS verse
  FROM songs
  WHERE id = $1
)
SELECT verse
FROM verses
LIMIT $2 OFFSET $3
`

type GetSongVersesWithPaginationParams struct {
	ID     uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetSongVersesWithPagination(ctx context.Context, arg GetSongVersesWithPaginationParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getSongVersesWithPagination, arg.ID, arg.Limit, arg.Offset)
	var verse interface{}
	err := row.Scan(&verse)
	return verse, err
}

const getSongWithFiltersAndPagination = `-- name: GetSongWithFiltersAndPagination :one
SELECT id, group_name, song_name, release_date, link
FROM songs
WHERE 
  (group_name ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (song_name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (release_date = $3 OR $3 IS NULL)
ORDER BY release_date DESC
LIMIT $4 OFFSET $5
`

type GetSongWithFiltersAndPaginationParams struct {
	Column1     sql.NullString
	Column2     sql.NullString
	ReleaseDate sql.NullTime
	Limit       int32
	Offset      int32
}

type GetSongWithFiltersAndPaginationRow struct {
	ID          uuid.UUID
	GroupName   string
	SongName    string
	ReleaseDate sql.NullTime
	Link        sql.NullString
}

func (q *Queries) GetSongWithFiltersAndPagination(ctx context.Context, arg GetSongWithFiltersAndPaginationParams) (GetSongWithFiltersAndPaginationRow, error) {
	row := q.db.QueryRowContext(ctx, getSongWithFiltersAndPagination,
		arg.Column1,
		arg.Column2,
		arg.ReleaseDate,
		arg.Limit,
		arg.Offset,
	)
	var i GetSongWithFiltersAndPaginationRow
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.SongName,
		&i.ReleaseDate,
		&i.Link,
	)
	return i, err
}

const getSongs = `-- name: GetSongs :many
SELECT id, group_name, song_name, release_date, text, link FROM songs 
WHERE group_name ILIKE COALESCE($1, '%') 
OR song_name ILIKE COALESCE($2, '%') 
LIMIT $3 OFFSET $4
`

type GetSongsParams struct {
	GroupName string
	SongName  string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetSongs(ctx context.Context, arg GetSongsParams) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getSongs,
		arg.GroupName,
		arg.SongName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.SongName,
			&i.ReleaseDate,
			&i.Text,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSong = `-- name: InsertSong :exec
INSERT INTO songs (id, group_name, song_name, release_date, text, link)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertSongParams struct {
	ID          uuid.UUID
	GroupName   string
	SongName    string
	ReleaseDate sql.NullTime
	Text        sql.NullString
	Link        sql.NullString
}

func (q *Queries) InsertSong(ctx context.Context, arg InsertSongParams) error {
	_, err := q.db.ExecContext(ctx, insertSong,
		arg.ID,
		arg.GroupName,
		arg.SongName,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
	)
	return err
}

const updateSong = `-- name: UpdateSong :exec
UPDATE songs SET group_name = $2, song_name = $3, text = $4, release_date = $5, link = $6 WHERE id = $1
`

type UpdateSongParams struct {
	ID          uuid.UUID
	GroupName   string
	SongName    string
	Text        sql.NullString
	ReleaseDate sql.NullTime
	Link        sql.NullString
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) error {
	_, err := q.db.ExecContext(ctx, updateSong,
		arg.ID,
		arg.GroupName,
		arg.SongName,
		arg.Text,
		arg.ReleaseDate,
		arg.Link,
	)
	return err
}
